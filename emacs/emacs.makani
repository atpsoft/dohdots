; tired of accidentally starting a mail message
(global-unset-key "\C-x\m")

; replace ctrl-v with ctrl-dot for scroll-up and meta-v with ctrl-comma for scroll-down
(global-unset-key "\C-v")
(global-unset-key "\M-v")

; I like to have a single sequence binding for undo
(global-set-key "\C-z" 'undo)

; I kept accidentally hit this bind somehow when I was going fast.  I very rarely need to do this, so I decided a 3 sequence binding was a good solution
(global-unset-key "\C-x\C-c")
(global-set-key "\C-x\C-y\C-q" 'save-buffers-kill-emacs-dont-ask-about-processes)

; not sure exactly what these do
(setq x-select-enable-clipboard t)
(global-set-key "\M-w" 'kill-ring-save)

; the backup files drive me crazy
(custom-set-variables
 '(make-backup-files nil)
)

; these next few things related to windows and ctrl-m still aren't quite what I want, but getting closer
;(defun fix-windows-file()
;  (interactive)
;  (beginning-of-buffer)
;  (replace-ctrl-m)
;  (delete-trailing-save-buffer)
;)

(fset 'fix-windows-file
   [?\M-x ?b ?e ?g ?i ?n ?n ?i ?n ?g ?- ?o ?f ?- ?b ?u ?f ?f ?e ?r return ?\M-x ?r ?e ?p ?l ?a ?c ?e ?- ?c ?t ?r ?l ?- ?m return ?\M-x ?d ?e ?l ?e ?t ?e ?- ?t ?r ?a ?i ?l ?i ?n ?g ?- ?s ?a ?v ?e ?- ?b ?u ?f ?f ?e ?r return])

(global-unset-key "\C-x\C-m")
;(global-set-key "\C-j\C-m" 'replace-ctrl-m)
(global-set-key "\C-j\C-m" 'fix-windows-file)

; old - doesn't appear to be needed or used anymore
; (setq my-frame-position '(0 . 0))
; (setq my-frame-size '(176 . 64))

; tinkering with colors
(custom-set-faces
'(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "orange4"))))
'(font-lock-type-face ((((class color) (min-colors 88) (background light)) (:foreground "ForestGreen"))))
'(font-lock-variable-name-face ((((class color) (min-colors 88) (background light)) (:foreground "SeaGreen"))))
)

; this will delete all duplicate lines in a region
(defun uniq-lines (beg end)
  "Unique lines in region.
Called from a program, there are two arguments:
BEG and END (region to sort)."
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (not (eobp))
        (kill-line 1)
        (yank)
        (let ((next-line (point)))
          (while
              (re-search-forward
               (format "^%s" (regexp-quote (car kill-ring))) nil t)
            (replace-match "" nil nil))
          (goto-char next-line))))))
